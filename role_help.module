<?php
/* TODO Form buttons can define custom #submit and #validate handlers.
   All forms can have #validate and #submit properties containing lists of
   validation and submission handlers to be executed when a user submits data.
   Previously, if a form featured multiple submission buttons to initiate
   different actions (updating a record versus deleting, for example), it was
   necessary to check the incoming form_values['op'] for the name of the
   clicked button, then execute different code based on its value. Now, it is
   possible to define #validate and #submit properties on each individual form
   button if desired. */

// role_help

/**
 * @file
 * The Role Help module allows a site admin (with the 'administer access control' permission)
 * to set a description of each role.
 * These are shown to users on a site help page. This works in the same way as the filter tips
 * page: only the role descriptions a user has access to are shown.
 * Help text for each role is set on the role's edit page ('edit role' on admin/user/roles),
 * except for the anonymous user and authenticated user roles, whose help text is set on
 * a separate admin page.
 * Help text uses the default site input format, unless you set a different format for all
 * role help text on the role help admin page.
 */

/**
 * Implementation of hook_help().
 */
function role_help_help($path='', $arg) {
  $output = '';

  switch ($path) {
    // main help page
    case "admin/help#role_help":
      $output = '<p>'.  t("The Role Help module displays a help page that is tailored to a user, showing information for each role they have assigned to them. This is visible to anonymous users only if a description is set for that role.") .'</p>';
      $output .= '<p>'. t("Set description text for a role on its settings pages.") .'</p>';
      $output .= t('<p>You can</p>
<ul>
<li>set a description for each role on its <a href="@admin-roles-page">settings page</a>.</li>
<li>set descriptions for the anonymous and authenticated roles on the <a href="@admin-role-help-page">role help settings page</a>.</li>
<li>set the input format for all role help text on the <a href="@admin-role-help-page">role help settings page</a>.</li></ul>',
        array(
          '@admin-roles-page' => url('admin/user/roles'),
          '@admin-role-help-page' => url('admin/user/role_help'),
        )) .'';
      return $output;
    case "admin/user/role_help":
      $output = '<p>Set descriptions for the anonymous user and authenticated user roles here. Descriptions for other roles are set on each role\'s settings page. You can also set an input format for all role help texts here.</p>';
      return $output;

  }
}

/**
 * Implementation of hook_perm().
 */
function role_help_perm() {
  return array('access role help descriptions');
}

/**
* Implementation of hook_menu().
*/
function role_help_menu() {
  $items['help/roles'] = array(
    'title' => 'Site help',
    'page callback' => 'role_help_page',
    'access callback' => '_role_help_menu_access',
    'type' => MENU_NORMAL_ITEM,
    'weight' => 1,
  );
  $items['admin/user/role_help'] = array(
    'title' => 'Role help settings',
    'description' => 'Set the input format and role help text for anonymous and authorized roles.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('role_help_admin_settings'),
    'access arguments' => array('administer access control'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 1,
  );

  return $items;
}

/**
 * Menu access callback for the role help page.
 */
function _role_help_menu_access() {
  // The permission has ultimate authority.
  if (!user_access('access role help descriptions')) {
    return FALSE;
  }

  global $user;

  // Anonymous users have access if there is a description for that role.
  $anon_access = db_result(db_query('SELECT description FROM {role_help} WHERE rid = 1')) ? 1 : 0;
  $anon_access = db_result(db_query('SELECT description FROM {role_help} WHERE rid = 1'));

  #dsm($anon_access);

  return $user->uid || $anon_access;
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function role_help_form_user_admin_role_alter(&$form, &$form_state) {
  // Role edit form: add a text area for the role's help text.
  $result = db_query('SELECT description FROM {role_help} WHERE rid = %d', $form['rid']['#value']);
  $description = db_result($result);

  $form['role_help'] = array(
    '#type' => 'textarea',
    '#title' => t('Help text'),
    '#default_value' => $description,
    '#description' => t('A description of what a user with this role can accomplish. This will be shown to users on the site help page.'),
    '#weight' => -5,
  );
  $form['name']['#weight'] = -10;
  $form['#submit'][] = 'role_help_user_admin_role_form_submit';
}

/**
 * Custom submit function for user_admin_role form.
 *
 * Save or update text, delete with role.
 */
function role_help_user_admin_role_form_submit($form, &$form_state) {
/* TODO The 'op' element in the form values is deprecated.
   Each button can have #validate and #submit functions associated with it.
   Thus, there should be one button that submits the form and which invokes
   the normal form_id_validate and form_id_submit handlers. Any additional
   buttons which need to invoke different validate or submit functionality
   should have button-specific functions. */
  if ($form_state['values']['op'] == t('Save role')) {
    if ($form_state['values']['role_help'] != '') {
      // text set: update or insert an entry
      $result = db_query("SELECT description from {role_help} WHERE rid = %d", $form_state['values']['rid']);
      if ($num_rows) {
        db_query("UPDATE {role_help} SET description = '%s' WHERE rid = %d", $form_state['values']['role_help'], $form_state['values']['rid']);
      }
      else {
        db_query("INSERT INTO {role_help} (rid, description) VALUES (%d, '%s')", $form_state['values']['rid'], $form_state['values']['role_help']);
      }
      drupal_set_message(t('The role help text has been saved.'));
    }
    else {
      // text blanked: delete entry
      db_query('DELETE FROM {role_help} WHERE rid = %d', $form_state['values']['rid']);
    }
  }
/* TODO The 'op' element in the form values is deprecated.
   Each button can have #validate and #submit functions associated with it.
   Thus, there should be one button that submits the form and which invokes
   the normal form_id_validate and form_id_submit handlers. Any additional
   buttons which need to invoke different validate or submit functionality
   should have button-specific functions. */
  else if ($form_state['values']['op'] == t('Delete role')) {
    // role deleted: delete entry
    db_query('DELETE FROM {role_help} WHERE rid = %d', $form_state['values']['rid']);
  }
}

/**
 * Display the role help admin settings page.
 *
 * Set the description for the anonymous and authorized users here.
 */
function role_help_admin_settings() {
  $result = db_query('SELECT rid, description FROM {role_help} WHERE rid IN (%d, %d)', 1, 2);
  while ($item = db_fetch_array($result)) {
    $descriptions[$item['rid']] = $item['description'];
  }
  #$form['#submit'] = array('role_help_admin_settings_submit' => array());

  $form['anonymous_help'] = array(
      '#type' => 'textarea',
      '#title' => t('Anonymous user'),
      '#default_value' => $descriptions[1],
      '#description' => t('A description of what an anonymous user can accomplish. You should only set this if anonymous users have rights beyond accessing content. If non-empty, this will be shown to anonymous users on the site help page.'),
    );
  $form['authenticated_help'] = array(
      '#type' => 'textarea',
      '#title' => t('Authenticated user'),
      '#default_value' => $descriptions[2],
      '#description' => t('A description of what an authenticated user can accomplish. If non-empty, this will be shown to authenticated users on the site help page. You should only'),
    );


  $form['role_help_format'] = filter_form(variable_get('role_help_format', FILTER_FORMAT_DEFAULT));
  $form['role_help_format']['#collapsible'] = 0;
  $form['role_help_format']['#collapsed'] = 0;
  $form['role_help_format']['#description'] = 'The input format to use for all role help text.';

  $form['submit'] = array('#type' => 'submit', '#value' => t('Save configuration') );

  return $form;
}

/**
 * Submit function for admin settings form.
 *
 * Save or update text, delete if blanked.
 */
function role_help_admin_settings_submit($form, &$form_state) {
  variable_set('role_help_format', $form_state['values']['format']);

  foreach (array(1 => 'anonymous_help', 2 => 'authenticated_help') as $rid => $role) {
    db_query('DELETE FROM {role_help} WHERE rid = %d', $rid);
    if ($form_state['values'][$role] != '') {
      db_query("INSERT INTO {role_help} (rid, description) VALUES (%d, '%s')", $rid, $form_state['values'][$role]);
    }
  }
  // clear cache so anon users either gain or lose the site help menu item
  cache_clear_all('*', 'cache_menu', TRUE);


  drupal_set_message(t('The role help settings have been saved.'));
}

/**
 * Menu callback for the role help page.
 *
 * Access control admins are shown all roles.
 */
function role_help_page() {
  if (user_access('administer permissions')) {
    $header = t('You are an access control administrator. All roles with help text are listed below:');

    $result = db_query("SELECT name, description FROM {role} r INNER JOIN {role_help} h ON r.rid = h.rid");
  }
  else {
    $header = t('Your user account is enabled to do the following on this site:');

    global $user;
    $user_rids = array_keys($user->roles);
    $placeholders = implode(',', array_fill(0, count($user_rids), '%d'));
    $result = db_query("SELECT name, description FROM {role} r INNER JOIN {role_help} h ON r.rid = h.rid WHERE r.rid IN ($placeholders) ORDER BY r.rid", $user_rids );
  }

  $role_help_items = array();
  while ($item = db_fetch_array($result)) {
    $role_help_items[] = theme('role_help_section', $item['name'], $item['description']);
  }
  if (!count($role_help_items)) {
    $header = t('No role help text has been set.');
  }

  $output = "<p>$header</p>";
  $output .= theme('item_list', $role_help_items);

  return $output;
}

/**
 * Implementation of hook_theme().
 */
function role_help_theme() {
  return array(
    'role_help_section' => array(
      'file' => 'role_help.module',
      'arguments' => array(
        'name' => NULL,
        'description' => NULL,
      ),
    ),
  );
}

/**
 * Theme a role help section.
 *
 * @param $name
 *  The role name.
 * @param $description
 *  The role description text.
 */
function theme_role_help_section($name, $description) {
  $output .= '<h3>'. ucfirst($name) .'</h3>';
  $output .= '<div>'. check_markup($description, variable_get('role_help_format', FILTER_FORMAT_DEFAULT), FALSE) .'</div>';
  return $output;
}

