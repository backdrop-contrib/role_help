<?php
/**
 * @file
 * The Role Help module allows a site admin (with the 'administer access control' permission)
 * to set a description of each role.
 * These are shown to users on a site help page. This works in the same way as the filter tips
 * page: only the role descriptions a user has access to are shown.
 * Help text for each role is set on the role's edit page ('edit role' on admin/user/roles),
 * except for the anonymous user and authenticated user roles, whose help text is set on
 * a separate admin page.
 * Help text uses the default site input format, unless you set a different format for all
 * role help text on the role help admin page.
 */

/**
 * Implementation of hook_help().
 */
function role_help_help($path = '', $arg) {
  $output = '';

  switch ($path) {
    // main help page
    case "admin/help#role_help":
      $output = '<p>' . t("The Role Help module displays a help page that is tailored to a user, showing information for each role they have assigned to them. This is visible to anonymous users only if a description is set for that role.") . '</p>';
      $output .= '<p>' . t("Set description text for a role on its settings pages.") . '</p>';
      $output .= t('<p>You can</p>
<ul>
<li>set a summary and description for each role on its <a href="@admin-roles-page">settings page</a>.</li>
<li>show the summary on the <a href="@admin-roles-page">roles list</a>, and user profile edit pages.</li>
<li>set descriptions for the anonymous and authenticated roles on the <a href="@admin-role-help-page">role help settings page</a>.</li>
<li>set the input format for all role help text on the <a href="@admin-role-help-page">role help settings page</a>.</li></ul>',
        array(
        '@admin-roles-page' => url('admin/people/permissions/roles'),
        '@admin-role-help-page' => url('admin/config/people/role_help'),
      )) . '';
      return $output;
    case "admin/user/role_help":
      $output = '<p>Set descriptions for the anonymous user and authenticated user roles here. Descriptions for other roles are set on each role\'s settings page. You can also set an input format for all role help texts here.</p>';
      return $output;

  }
}

/**
 * Implementation of hook_permission().
 */
function role_help_permission() {
  return array(
    'access role help descriptions' => array(
      'description' => t('Access role help descriptions'),
      'title' => t('Access role help descriptions'),
    ));
}

/**
 * Implementation of hook_menu().
 */
function role_help_menu() {
  $items['help/roles'] = array(
    'title' => 'Site help',
    'page callback' => 'role_help_page',
    'access callback' => '_role_help_menu_access',
    'type' => MENU_NORMAL_ITEM,
    'weight' => 1,
    'file' => 'role_help.pages.inc',
  );
  $items['admin/config/people/role_help'] = array(
    'title' => 'Role help settings',
    'description' => 'Set the input format and role help text for anonymous and authorized roles.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('role_help_admin_settings'),
    'access arguments' => array('administer access control'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 1,
    'file' => 'role_help.pages.inc',
  );

  return $items;
}

/**
 * Menu access callback for the role help page.
 */
function _role_help_menu_access() {
  // The permission has ultimate authority.
  if (!user_access('access role help descriptions')) {
    return FALSE;
  }

  global $user;

  // Anonymous users have access if there is a description for that role.
  //$anon_access = db_result(db_query('SELECT help FROM {role_help} WHERE rid = 1')) ? 1 : 0;
  $anon_access = db_query('SELECT help FROM {role_help} WHERE rid = 1')->fetchObject();

  #dsm($anon_access);

  return $user->uid || $anon_access;
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function role_help_form_user_admin_role_alter(&$form, &$form_state) {
  // Role edit form: add a text area for the role's help text.
  if (isset($form['rid']['#value'])) {
    $result = db_query('SELECT * FROM {role_help} WHERE rid = :rid', array(':rid' => $form['rid']['#value']));
    $role_help = $result->fetchObject();
  }

  $form['role_help'] = array(
    '#tree' => TRUE,
    '#weight' => -5,
  );
  // Store a hidden value so we know whether to update or insert.
  $form['role_help']['exists'] = array(
    '#type' => 'value',
    '#value' => !empty($role_help),
  );
  $form['role_help']['summary'] = array(
    '#type' => 'textfield',
    '#title' => t('Summary'),
    '#size' => 80,
    '#maxlength' => 255,
    '#default_value' => isset($role_help->summary) ? $role_help->summary : '',
    '#description' => t('Summary of what permissions are assigned to this role, and how the role is used.  This will be shown on the role list and user profile edit pages.'),
  );
  $form['role_help']['help'] = array(
    '#type' => 'textarea',
    '#title' => t('Help text'),
    '#default_value' => isset($role_help->help) ? $role_help->help : '',
    '#description' => t('A more detailed description of what a user with this role can accomplish. This will be shown to users on the site help page.'),
  );
  $form['name']['#weight'] = -10;
  $form['#submit'][] = 'role_help_user_admin_role_form_submit';
}

/**
 * Custom submit function for user_admin_role form.
 *
 * Save or update text, delete with role.
 */
function role_help_user_admin_role_form_submit($form, &$form_state) {
  // TODO? The 'op' element in the form values is deprecated.
  // See Coder for more details.
  // However, core's user_admin_role_submit() is making use of this too
  // so eh.
  if ($form_state['values']['op'] == t('Save role')) {
    $role_help = $form_state['values']['role_help'];
    $role_help['rid'] = $form_state['values']['rid'];
    if ($role_help['exists']) {
      drupal_write_record('role_help', $role_help, 'rid');
    }
    else {
      drupal_write_record('role_help', $role_help);
    }
    drupal_set_message(t('The role help text has been saved.'));
  }
  elseif ($form_state['values']['op'] == t('Delete role')) {
    // Role deleted: delete our entry.
    db_query('DELETE FROM {role_help} WHERE rid = :rid', array(':rid' => $form_state['values']['rid']));
  }
}

/**
 * Implementation of hook_form_FORM_ID_alter(): user_admin_new_role.
 */
function role_help_form_user_admin_new_role_alter(&$form, &$form_state) {
  $form['#submit'][] = 'role_help_user_admin_new_role_form_submit';
}

/**
 * Custom submit function for user_admin_new_role form.
 *
 * Redirect the user to the detailed role edit page.
 */
function role_help_user_admin_new_role_form_submit($form, &$form_state) {
  $rid = db_last_insert_id('role', 'rid');
  // Prompt for edit of summary, description after quick add.
  if ($rid) {
    drupal_set_message(t('Please edit the role summary and help text.'));
    $form_state['redirect'] = 'admin/user/roles/edit/' . $rid;
  }
}


/**
 * Implementation of hook_form_FORM_ID_alter(): user_profile_form.
 *
 * Add role summaries to the user account edit form role checkboxes.
 */
function role_help_form_user_profile_form_alter(&$form, &$form_state) {
  $form['account']['roles']['#after_build'][] = 'role_help_role_checkboxes_after_build';
}

/**
 * Implementation of hook_form_FORM_ID_alter(): user_register.
 *
 * Add role summaries to the user register form role checkboxes.
 */
function role_help_form_user_register_form_alter(&$form, &$form_state) {
  // The form is used both for admins and new user registration; in the
  // later case the roles element is not present.

  if (isset($form['account']['roles'])) {
    $form['account']['roles']['#after_build'][] = 'role_help_role_checkboxes_after_build';
  }
}

/**
 * Implementation of hook_form_FORM_ID_alter(): role_delegation_roles_form.
 *
 * Add role summaries to role_delegation module's role checkboxes.
 */
function role_help_form_role_delegation_roles_form_alter(&$form, &$form_state) {
  $form['roles']['#after_build'][] = 'role_help_role_checkboxes_after_build';
}

/**
 * Form #after_build processor to add descriptions to checkboxes.
 *
 * Add to a 'checkboxes' element; or any element all of whose children are
 * individual 'checkbox' elements keyed by rid.
 */
function role_help_role_checkboxes_after_build($element, &$form_state) {
  $query = db_query("SELECT rid, summary FROM {role_help}");
  $summary = array();
  while ($data = $query->fetchObject()) {
    $summary[$data->rid] = $data->summary;
  }
  // Add role summary to form checkboxes.
  foreach (element_children($element) as $rid) {
    if (isset($summary[$rid])) {
      $element[$rid]['#description'] = check_plain($summary[$rid]);
    }
  }
  return $element;
}

/**
 * Implementation of hook_theme().
 */
function role_help_theme() {
  return array(
    'role_help_section' => array(
      'file' => 'role_help.module',
      'arguments' => array(
        'name' => NULL,
        'description' => NULL,
      ),
    ),
    'role_name' => array(
      'arguments' => array('name' => NULL, 'rid' => NULL),
    ),
  );
}

/**
 * Implementation of hook_theme_registry_alter().
 */
function role_help_theme_registry_alter(&$theme_registry) {
  // Override to provide our extras to the role list admin page.
  $theme_registry['user_admin_new_role']['function'] = 'role_help_user_admin_new_role';
}

/**
 * Theme a role help section.
 *
 * @param $name
 *  The role name.
 * @param $description
 *  The role description text.
 */
function theme_role_help_section($name, $description) {
  $output .= '<h3>' . ucfirst(check_plain($name)) . '</h3>';
  $output .= '<div>' . check_markup($description, variable_get('role_help_format', FILTER_FORMAT_DEFAULT), FALSE) . '</div>';
  return $output;
}

/**
 * Theme the new-role form.
 *
 * Override of theme_user_admin_new_role() to add theme('role_name').
 *
 * @ingroup themeable
 */
function role_help_user_admin_new_role($form) {
  $header = array(t('Name'), array(
      'data' => t('Operations'),
      'colspan' => 2,
    ));
  foreach (user_roles() as $rid => $name) {
    $edit_permissions = l(t('edit permissions'), 'admin/user/permissions/' . $rid);
    if (!in_array($rid, array(DRUPAL_ANONYMOUS_RID, DRUPAL_AUTHENTICATED_RID))) {
      $rows[] = array(theme('role_name', $name, $rid), l(t('edit role'), 'admin/user/roles/edit/' . $rid), $edit_permissions);
    }
    else {
      $rows[] = array($name, t('locked'), $edit_permissions);
    }
    if (!empty($summary)) {
      $rows[] = array($summary);
    }
  }
  $rows[] = array(drupal_render($form['name']), array(
      'data' => drupal_render($form['submit']),
      'colspan' => 2,
    ));

  $output = drupal_render($form);
  $output .= theme('table', $header, $rows);

  return $output;
}

/**
 * Add role summary to role name.
 *
 * @param $name
 *   Role name
 * @param $rid
 *   Role id
 *
 * @ingroup themeable
 */
function theme_role_name($name, $rid = NULL) {
  // @todo: fix so this query isn't run once for each role!
  $summary = db_result(db_query("SELECT summary FROM {role_help} d WHERE d.rid = :rid", array(':rid' => $rid)));
  return '<div class="role-name">' . check_plain($name) . '</div>' . theme('placeholder', $summary);
}
