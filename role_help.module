<?php
/**
 * @file
 *
 * Main file implementing hooks and callbacks.
 */

/**
 * Implements hook_permission().
 */
function role_help_permission() {
  return array(
    'access role help descriptions' => array(
      'description' => t('Access role help descriptions'),
      'title' => t('Access role help descriptions'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function role_help_menu() {
  $items['admin/people/role-help'] = array(
    'title' => 'Role help',
    'description' => 'Display all roles that have help text descriptions.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('role_help_admin_page'),
    'file' => 'role_help.admin.inc',
    'access arguments' => array('administer permissions'),
    'type' => MENU_LOCAL_TASK,
  );

  // If the role_delegation module exists, it will create the path user/%/roles
  // and will show the user's roles. If it doesn't, we'll create a display page
  // for the user. Note that you can suppress this page by denying the user
  // 'access role help descriptions' permission.
  if (!module_exists('role_delegation')) {
    $items['user/%user/roles'] = array(
      'title' => 'Roles',
      'page callback' => 'role_help_user_page',
      'page arguments' => array(1),
      'file' => 'role_help.pages.inc',
      'access callback' => '_role_help_menu_access',
      'type' => MENU_LOCAL_TASK,
    );
  }

  return $items;
}

/**
 * Menu access callback for the role help page.
 */
function _role_help_menu_access() {
  global $user;

  // The permission has ultimate authority.
  if (!user_access('access role help descriptions')) {
    return FALSE;
  }

  // Anonymous users have access if there is a description for that role.
  $anon_access = !empty(db_query('
    SELECT help
    FROM {role_help}
    WHERE role = :anon_role
    ', array(':anon_role' => BACKDROP_ANONYMOUS_ROLE))
    ->fetchField());

  return $user->uid || $anon_access;
}

/**
 * Implements hook_config_info().
 */
function role_help_config_info() {
  $prefixes['role_help.settings'] = array(
    'label' => t('Role Help settings'),
    'group' => t('Configuration'),
  );
  return $prefixes;
}

/**
 * Implements hook_form_FORM_ID_alter() for user_admin_roles.
 *
 * See form at admin/config/people/roles.
 * Adds a setting for the "Detailed help text" format to the Roles admin form.
 */
function role_help_form_user_admin_roles_alter(&$form, &$form_state) {

  $form['role_help_format_wrapper'] = array(
    '#type' => 'fieldset',
    '#title' => t('Detailed help text format'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['role_help_format_wrapper']['role_help_format'] = array(
    '#type' => 'select',
    '#title' => t('Format'),
    '#description' => t('Select the format to be applied to the "Detailed help text" used on pages provided by the Role Help module.'),
    '#options' => _role_help_format_names(),
    '#default_value' => config_get('role_help.settings', 'role_help_format'),
  );

  $form['actions']['submit']['#submit'][] = 'role_help_form_user_admin_roles_order_submit';
  $form['add']['#submit'][] = 'role_help_form_user_admin_roles_add_submit';
}

/**
 * Perform additional handling when saving the Roles admin form.
 */
function role_help_form_user_admin_roles_order_submit($form, &$form_state) {
  config_set('role_help.settings', 'role_help_format',
    $form_state['input']['role_help_format']);
}

/**
 * Perform additional handling when adding a role from the Roles admin form.
 *
 * Redirect to the role edit page so we can fill in the summary and help text.
 */
function role_help_form_user_admin_roles_add_submit($form, &$form_state) {
  $role = $form_state['values']['name'];
  $form_state['redirect'] = "admin/config/people/roles/edit/{$role}";
}

/**
 * Implements hook_form_FORM_ID_alter() for user_admin_role_delete_confirm.
 *
 * Add a submit handler to the role delete confirmation form to update the
 * role_help table.
 */
function role_help_form_user_admin_role_delete_confirm_alter(&$form, &$form_state) {
  $form['#submit'][] = 'role_help_user_admin_role_delete_confirm_submit';
}

/**
 * Perform additional handling when deleting a role.
 */
function role_help_user_admin_role_delete_confirm_submit($form, &$form_state) {
  db_query('
    DELETE
    FROM {role_help}
    WHERE role = :role
    ', array(':role' => $form_state['values']['role']));
}

/**
 * Implements hook_form_FORM_ID_alter() for user_admin_role.
 *
 * See form at admin/config/people/roles/edit/%user_role.
 * Adds text areas for the role's help text and replace the submit handler when
 * adding or editing a role.
 */
function role_help_form_user_admin_role_alter(&$form, &$form_state) {
  if (isset($form['name']['#default_value'])) {
    $result = db_query('
      SELECT *
      FROM {role_help}
      WHERE role = :role
      ', array(':role' => $form['name']['#default_value']));
    $role_help = $result->fetchObject();
  }
  $form['role_help'] = array(
    '#tree' => TRUE,
  );

  $format_names = _role_help_format_names();
  $format_name = $format_names[config_get('role_help.settings', 'role_help_format')];
  $extra = module_exists('role_delegation') ? '' : ' ' . t('and to users on the Roles tab in their profile');
  $form['role_help']['help'] = array(
    '#type' => 'textarea',
    '#title' => t('Detailed help text'),
    '#default_value' => isset($role_help->help) ? $role_help->help : '',
    '#description' => t('A more detailed description of what a user with this role can accomplish. This, if non-empty, will be shown to users on the <a href="!help_url">admin roles listing</a>!extra. The "@format" format (<a href="!change_url">change this</a>) will be applied.',
      array(
        '!extra' => $extra,
        '@format' => $format_name,
        '!help_url' => url('admin/people/role-help'),
        '!change_url' => url('admin/config/people/roles'),
      )),
  );
  $form['#submit'] = array('role_help_user_admin_role_submit');
}

/**
 * Replacement submission handler for the role edit form.
 *
 * Perform the original handling, but also save the detailed help text into our
 * table.
 *
 * @See user_admin_role_submit()
 */
function role_help_user_admin_role_submit($form, &$form_state) {

  // Perform the original handling from user_admin_role_submit(), which will
  // save the role information (including descriptions) and set up the redirect.
  user_admin_role_submit($form, $form_state);

  // Get the affected role (new or modified).
  if (empty($form_state['role'])) {
    // We created (and saved) a new role.
    $name = $form_state['values']['name'];
    $role = user_role_load($name);
    $new = TRUE;
  }
  else {
    // We updated an existing role.
    $role = $form_state['role'];
    $new = FALSE;
  }

  // We'll keep the role_help table structure the same, but now we'll use the
  // core role description field for the summary column (which replaced it).
  $role_help = array(
    'role' => $role->name,
    'help' => $form_state['values']['role_help']['help'],
    'summary' => $role->description,
  );
  if ($new) {
    backdrop_write_record('role_help', $role_help);
  }
  else {
    backdrop_write_record('role_help', $role_help, 'role');
  }
}

/**
 * Return a formatted list of roles with their help text.
 *
 * Used on admin list of all roles and on user profile Roles tab.
 */
function _role_help_role_list_output($header, $roles_info) {
  $user_role_names = user_roles();
  $role_help_items = array();
  foreach ($roles_info as $role => $help) {
    $role_help_items[] = theme('role_help_section', array(
      'name' => $user_role_names[$role],
      'description' => $help));
  }
  if (!count($role_help_items)) {
    $header = t('No role information available.');
  }
  return array(
    array(
      '#type' => 'help',
      '#markup' => $header,
    ),
    array(
      '#markup' => theme('item_list', array('items' => $role_help_items)),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function role_help_theme() {
  return array(
    'role_help_section' => array(
      'file' => 'role_help.module',
      'variables' => array(
        'name' => NULL,
        'description' => NULL,
      ),
    ),
  );
}

/**
 * Theme a role_help_section, used on the admin/people/role-help and
 * user/N/roles pages.
 *
 * @ingroup themeable
 */
function theme_role_help_section($variables) {
  $output = '<h3>' . ucfirst(check_plain($variables['name'])) . '</h3>';
  $format = config_get('role_help.settings', 'role_help_format');
  $output .= '<div>' .
    check_markup($variables['description'], $format, FALSE) . '</div>';
  return $output;
}

/**
 * Return the enabled text filter formats.
 */
function _role_help_format_names() {
  $format_names = array();
  $formats = filter_formats();
  foreach ($formats as $format => $obj) {
    $format_names[$format] = $obj->name;
  }
  return $format_names;
}
